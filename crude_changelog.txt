Welcome to crude changelog, the log that gets facts wrong about your favorite changes.
I'm jan Wiwijen (jan Opitamon), and today I'll be discussing a pre-alpha version of a Godot project.

January 2024 - ????? 2024

Codename: Project Daybreak
Update: Pre-alpha 6,
TL;DR: 


Noteworthy Additions:
	+ Added, modified, or replaced maps: 
		+ 
	+ Added placeholder graphics for ~60 monsters, out of between 150-256 total (1/3rd designed)
	+ Added more Addons
		+ Safe Resource Loader
		+ ModPlayer
		+ Clyde Dialogue
	+ Added navigation layers to maps, and code to utilize it


Noteworthy Subtractions:
	- 


Noteworthy Changes:
	* 


To Do List + Constructive Commentary:
	% Merge the Mob, Experimental, and Mouse Follow controllers into one big NPC controller
		% Tried, needs testing
	% Tear out Director/Screenplay and integrate Clyde
	% Integrate intro cinematic sequence
		% Add sprite layers for hair and clothing for player
	
	% Replace the remaining Arkeve tutorial code after prototyping his party screen system
		% Revise ALL Arkeve-based code until it both cannot be detected by plagiarism scanners ...
		... and is overall more robust. Not either/or, but both of these things.
	% Follow the Chris' Tutorials videos, mix with GDQuest for the battle scene
	% Fix and finish the failsafe map's generation code, otherwise it's not very safe
		% Make the shader actually do something, and put it in a nicer folder
	% Have ledge ensure Gamepieces don't stack on top of eachother by using raycasting.
	% Add/fix texture sheets
		% Split rock and dirt tiles visually
		% Fix the ledge art style
		% Add player hair shapes
			% Add tool to switch texture color palletes
				% Develop code for synthesizing a sprite sheet for the player to use.
		% Add overworld sprites for Mom, Scientist, Starters, and Barney for Alpha demo 01
	% Move the TitleScreen to the ActivityInterface
		% Make the Activity/Overworld switch not shrink the overworld, as this may cause ...
		... misalignments if any children are still running.
			% Pausing should switch between process modes INHERIT and DISABLED.
	% Saving and Loading
		% Refactor all save/load code regarding Gamepieces
			% Instead of using signals, have all Gamepieces registered with GlobalGamepieceTransfer
				% When saving, save all members of GlobalGamepieceTransfer
				% Rename GlobalGamepieceTransfer, because of its expanded role (Gametokens too?)
					% Maybe rename to GlobalGamethingTracker? 
			% Gamepiece's data transfer code should be more complete
			% Gamepieces should automatically fix themselves upon being 'placed'
		% Add Gametokens and save code for that
		% Fix database backup system
			% If the databases don't exist, then create them via some template
		% If the game lacks a PATCHDATA database in "user://", then copy the provided one
			% Rely on PATCHDATA for balancing and forwards compatibility but not for assets/code
				% Maybe use PATCHDATA for asset/code pointers/paths? Seems more like a .PCK thing
	% Fix/expand the pause menu
		% This includes the inventory GUI and backend


General Commentary:
	> Code that is reused often, or is otherwise bulky, should be moved to "global" classes.
	> That way, I don't have to worry about if the code is duplicating functions, enums, etc.
	> Only issue then would be too many "global" (autoload) classes.
	
	> Functions must be separated with 2 blank lines, uninterrupted.
	> Comments preceeding a function shoukd explain as if it is the class documentation
	> Comments within a function should explain 'why' or 'how' rather than 'what' or 'where'
		> "this line solves an edge case related to char *"  >  [var v = 2] "this line sets v to 2"
			> I (jan Wiwijen) don't follow my own rules. This is a bad thing.
	
	> Generally, code regarding a thing should be kept within that thing, or its direct controller.
	
	> This whole thing is a redo for multiple reasons including: 
		> Being confused between code and asset licensing in the GitHub repository settings
		> Following tutorials from unknown license repositories
		> Inconsistant file naming + bad folder structure
		> Improper credits documentation
		> Outdated version of Godot
		> Setting up is the best part once you know how. Expanding & bugfixing though...?
	
	> No sources should be less permissive than a BSD 3-Clause license. 
	> Everything in here should be both free as in libre, and free as in moneys.
	> All assets not made for this project need proper credit (CC-BY-4.0, SIL), or to be PD/CC-0.
		> FilmCow's sound pack license is beyond the limit of restrictiveness. Avoid using.
	
	> We're skipping the proper drop of the previous pre-alpha, as a lot of development ...
	... went into lore, concepts, and other repos. And downloading assets. So much scrolling.
	... and also I don't want to.
	
	> It turns out that ALL the work I put into planning a new navigation system ...
	> ... the baking, parsing, running, etc...
	> ... it wasn't *useless* per se, but I could just use the navmesh? At least for now?
	> That's right, new to Godot 4.2+, the navmesh easy bake button.
	
	> The name "For The Longest Time" is rejected for pre-Alpha 5 due to lack of thematic accuracy. 
	> To avoid confusion, the name may not be reused for any pre-Alphas.
	> It may be reused for Betas, or patches, but ideally use for neither.
	
	> DO NOT mess with GLoot code during or after pre-Alpha 6 except to make the editor not crash
		> The addon needs a lot of refactoring to be made efficient
			> Or do mess with it, over at the GLoot repo
		> This does not mean "don't use GLoot", but leave the code alone. Use func calls.
