Welcome to crude changelog, the log that gets facts wrong about your favorite changes.
I'm jan Wiwijen (jan Opitaman), and today I'll be discussing a pre-alpha version of a Godot project.

Codename: Project Daybreak
Update: Pre-alpha 3
TL;DR: idk yet



Notable additions:
	+ D* Lite algorithm code
		+ Various unused code related to the above
	+ Prototype "Port Town", and accompanying tiles to practice town design & teleports
	+ Prototype "Bridge Town", used to test pseudo-3D maps, Ã  la MyHouse
	+ Added more code to the combattants and combat scene
		+ Added more graphics and GUI elements for the combat scene
	+ Always more graphics and sounds that aren't used (yet)
	+ Added GamepieceController (which is broken / doesn't work)


Notable subtractions:
	- Multiple tcrf-worthy scripts I did not develop, or have otherwise replaced
		- player[#].gd's are being replaced with *_controller_player.gd




Notable changes:
	* Changed daylight cycle to try to increase visibility at night
	+ Added more functionality to the Player Menu, seen through the 'exit' button working
		+ Pausing can now happen while the player (or any gamepiece, I hope) is moving
	* Put all new Player functionality into Gamepiece and then replaced Player with a Gamepiece
		- Some old functionality might be broken...
		* Tween is now tied to a variable that can be paused on a signal

	


To do eventually:
	% Redo all the Arkeve tutorials, but with substituted code
	% Follow the Chris' Tutorials videos, mix with GDQuest for the battle scene
	% Fix and finish the failsafe map's generation code, otherwise it's not very safe
		% Make the shader actually do something, and put it in a nicer folder
	% Fix the ledge graphics
		% Split rock and dirt tiles visually
		% Make the top edge closer match the collision box
	% When Godot 4.1 happens, turn some Global classes into Static fields like they're meant to be
	% Change between overworld & battle via add_child() and remove_child() perhaps
	% I have 2 options: I can mix NavServer, NavLink, and A*Grid, or I can make a new D*Server...


General Commentary:
	> Code that is reused often, or is otherwise bulky, should be moved to "global" classes.
	> That way, I don't have to worry about if the code is duplicating functions, enums, etc.
	> Only issue then would be too many "global" (autoload) classes.
	
	> This whole thing is a redo for multiple reasons including: 
		> Being confused between code and asset licensing in the GitHub repository settings
		> Following tutorials from unknown license repositories
		> Improper credits documentation
		> Outdated version of Godot
		> Setting up is the best part once you know how. Expanding & bugfixing though...?
		
	> All assets of any type have the same written rules (with some different definitions):
		> They must be custom-made...
		> ... provided under a permissive license (allowing for absolute free usage) ...
		> ... generated by machine learning model for general image/text (no Github CoPilot),
			  modified to not appear ML generated (because regardless of morals, AI images are ugly) ...
		> ... or created by following a tutorial whose result is not copyrighted,
			 which is similar to item 1 (custom), except photobashing sometimes.
		> If there is clear copyright violation, this should be noted as soon as possible.
		> Regardless, if violation is suspected, investigation and/or asset replacement is advised.
		
		> For art, images, etc:
			> Permissive licenses include CC0, Unlicense, DWTFYW/WTFPL, and public domain
			> Machine Learning model images should be traced and repainted, ... 
				> ... or used as reference work, or for less important textures.
				> Some ML generated images are subject to restrictions anyways, so avoid using it.
				> Art is highest priority for both consistent quality and the human aspect
		
		> For code:
			> Permissive licenses include MIT, Unlicense, CC0, DWTFYW/WTFPL, and public domain
			> Machine Learning code often needs expansion regardless. ...
				> ... It should be used for boilerplate, not for unique code.  ...
				> ... All ML code needs modification, and subsequent expansion.
			> If the tutorial has a repo, ensure a permissive license, or sufficiently generic code.
			> All code whose license requires credit needs to be credited
		
		> For text:
			> Permissive licenses are same as for images. (Why would you copy enough to copyright?)
		
		> For fonts:
			> Permissive licenses include SIL Open Font license
			> Machine Learning is not viable, do not use
		
		> For sound:
			> Permissive licenses are same as for images.
			> Machine Learning is not viable, do not use
