Welcome to crude changelog, the log that gets facts wrong about your favorite changes.
I'm jan Wiwijen (jan Opitaman), and today I'll be discussing a pre-alpha version of a Godot project.

Codename: Project Daybreak
Update: Pre-alpha "What's Goin Down"
TL;DR: Created a main menu, an overworld scene, daylight cycle, tilesets, and you walk/run around.



Notable additions:
	+ Tree object and associated assets
	+ Grass object and associated assets
	+ Added/expanded basic "MauveTown" tileset
	+ Adopted code from Arkeve's tutorials
	+ Adopted code from https://github.com/food-please/godot4-open-rpg
		* Will be phasing out Arkeve style code where viable
		* Some files may have been altered such that they signal as "corrupted". This is fine.
		+ Due to insertion failure, player.tscn now uses different base code to expand on.
	+ Started blocking out the failsafe (used to trap errors) (itself causes so many errors)
		+ By extension, added new tileset, shader, and sounds, although only the tileset is used
	+ Added code and a filter for daylight cycle lighting
	+ Added/fixed player collision against certain terrain types
	+ Added some assets for those TCRF people, I guess
	+ Added title screen with 5 buttons, 2 of which are functional
		* CurrentScene node is now a basic Node to prevent Node2D/Control child node issues
	+ Added a MIT template file, symbolically representing the repos copied from. 
		% Need to replace that w/ the real licenses.
	+ Added some shaders
	+ Started work on an options menu and battle scene
	+ Added pause menu (only pauses the player object)



Notable subtractions:
	- Depends on when we're subtracting from. Nothing much.




Notable changes:
	* Renamed aspects of MonsterBattleAI, and expanded upon it
	* Extracted parts of GlobalMove's CalculateRawDamage and used those funcs in MonsterBattleAI
	* Renamed 'effect' to 'moveeffect' to differentiate from vfx, sfx, and effectuation
	* Renamed GlobalBitfieldManip to GlobalBitManip for ease of speech, then expanded functionality
	* Changed folder name 'Static' to 'Global'
	* Due to insertion of Gamepiece, Grid, etc, all RedTown objects were moved to positive coords.
		* Due to removal of Gamepiece code, it will be implemented gradually if at all.
	* Made CrudeChangelog obey the appropriate margins



To do eventually:
	% Redo all the Arkeve tutorials, but with substituted code
	% Follow the Chris' Tutorials videos, mix with GDQuest for the battle scene
	% Fix and finish the failsafe map's generation code, otherwise it's not very safe
		% Make the shader actually do something, and put it in a nicer folder
	% Fix the ledge graphics
		% Split rock and dirt tiles visually
		% Make the top edge closer match the collision box
	% When Godot 4.1 happens, turn some Global classes into Static fields like they're meant to be
	% Change between overworld & battle via add_child() and remove_child() perhaps
	% I have 2 options: I can mix NavServer, NavLink, and A*Grid, or I can make a new D*Server...


General Commentary:
	> Code that is reused often, or is otherwise bulky, should be moved to "global" classes.
	> That way, I don't have to worry about if the code is duplicating functions, enums, etc.
	> Only issue then would be too many "global" (autoload) classes.
	
	> This whole thing is a redo for multiple reasons including: 
		> Being confused between code and asset licensing in the GitHub repository settings
		> Following tutorials from unknown license repositories
		> Improper credits documentation
		> Outdated version of Godot
		> Setting up is the best part once you know how. Expanding & bugfixing though...?
	
	> Since the project just has a version name... what about something with "Animus"?
		> Animus for soul, heart, emotion, etc from Latin
		> Animus for 'animal'
		> Animus for 'animated'
		> Animus for 'animosity'
		
		
		
	> All assets of any type have the same written rules (with some different definitions):
		> They must be custom-made...
		> ... provided under a permissive license ...
		> ... generated by machine learning model for general image/text (no Github CoPilot),
			  modified to not appear ML generated ...
		> ... or created by following a tutorial whose result is not copyrighted.
		> If there is clear copyright violation, this should be noted as soon as possible.
		> Regardless, if violation is suspected, investigation and/or asset replacement is advised.
		
		> For art, images, etc:
			> Permissive licenses include CC0, Unlicense, DWTFYW/WTFPL, and public domain
			> Machine Learning model images should be traced and repainted, ... 
				> ... or used as reference work, or for less important textures.
				> Some ML generated images are subject to restrictions anyways, so avoid using it.
				> Art is highest priority for both consistent quality and the human aspect
		
		> For code:
			> Permissive licenses include MIT, Unlicense, CC0, DWTFYW/WTFPL, and public domain
			> Machine Learning code often needs expansion regardless. ...
				> ... It should be used for boilerplate, not for unique code.  ...
				> ... All ML code needs modification, and subsequent expansion.
			> If the tutorial has a repo, ensure a permissive license, or sufficiently generic code.
		
		> For text:
			> Permissive licenses are same as for images. (Why would you copy enough to copyright?)
		
		> For fonts:
			> Permissive licenses include SIL Open Font license
			> Machine Learning is not viable, do not use
		
		> For sound:
			> Permissive licenses are same as for images.
			> Machine Learning is not viable, do not use
