Welcome to crude changelog, the log that gets facts wrong about your favorite changes.
I'm jan Wiwijen (jan Opitaman), and today we'll be discussing a pre-alpha version of an unnamed project.

Codename: Project Daybreak
Update: Prealpha "What's Goin Down"




Notable additions:
	+ Tree object and associated assets
	+ Grass object and associated assets
	+ Added/expanded basic "MauveTown" tileset
	+ Adopted code from https://github.com/food-please/godot4-open-rpg
		* Will be phasing out Arkeve style movement code
		* In testing and editing, some files may have been altered such that they signal as "corrupted". This is fine.
		+ Due to initial insertion failure, player.tscn now uses different MIT licensed code to be expanded upon.
	+ Started blocking out the failsafe (used to trap errors) (itself causes so many errors)
		+ By extension, added new tileset, shader, and sounds, although only the tileset is used
	+ Added code and a filter for daylight cycle lighting
	+ Added/fixed player collision against certain terrain types
	+ Added some assets for those TCRF people, I guess
	+ Added title screen with 5 buttons, 2 of which are functional
		* CurrentScene node is now a basic Node to prevent Node2D/Control child node issues
	+ Added a MIT template file, symbolically representing the repos copied from. 
		% Need to replace that w/ the real licenses.




Notable subtractions:
	- Depends on when we're subtracting from. Nothing much.




Notable changes:
	* Renamed aspects of MonsterBattleAI, and expanded upon it
	* Extracted parts of GlobalMove's CalculateRawDamage and used those funcs in MonsterBattleAI
	* Renamed 'effect' to 'moveeffect' in both filenames and database, to account for vfx, sfx, and effecting
	* Renamed GlobalBitfieldManip to GlobalBitManip to roll off the tongue better, and expanded functionality
	* Changed folder name 'Static' to 'Global'
	* Due to insertion of Gamepiece, Grid, and associated objects, all RedTown objects were moved to positive coords.
		* Due to removal of original Gamepiece code, its features will be implemented independently and gradually.




To do (in this or the next named update):
	% Redo all the Arkeve tutorials, but with the new player base code
	% Follow the Chris' Tutorials videos, mix with GDQuest for the battle scene
	% Turn 'Player' into a generic character class that the player has their own copy of
	% Fix and finish the failsafe map's generation code, otherwise it's not very safe
		% Make the shader actually do something, and put it in a nicer folder
	% Fix the ledge graphics
		% Split rock and dirt tiles
		% Make the edge of the ledge closer to the edge of the collision box
	% When Godot 4.1 happens, turn some Global classes into Static fields like they're meant to be




General Commentary:
	> Code that is reused often, or is otherwise bulky, should be moved to "global" classes.
	> That way, I don't have to worry about if the code is duplicating functions, enums, etc.
	> Only issue then would be too many "global" (autoload) classes.
	
	> This whole thing is a redo for multiple reasons including: 
		> Being confused between code and asset licensing in the GitHub repository settings
		> Following tutorials from unknown license repositories
		> Improper credits documentation
		> Outdated version of Godot
		> Setting up is the best part once you know how. Expanding & bugfixing though...?
	
	> Since the project just has a version name... what about something with "Animus"?
		> Animus for soul, heart, emotion, etc from Latin
		> Animus for 'animal'
		> Animus for 'animated'
		> Animus for 'animosity'
		
		
		
	> All assets of any type have the same written rules (with some different definitions):
		> They must be custom-made...
		> ... provided under a permissive license ...
		> ... generated by machine learning model for general image/text (no Github CoPilot),
			  modified to not appear ML generated ...
		> ... or created by following a tutorial whose result is not copyrighted.
		> If there is clear copyright violation, this should be noted as soon as possible.
		> Regardless, if violation is suspected, investigation and/or asset replacement is advised.
		
		> For art, images, etc:
			> Permissive licenses include CC0, Unlicense, DWTFYW/WTFPL, and public domain
			> Machine Learning model images should be traced and repainted, ... 
				> ... or used as reference work, or for less important textures.
				> Any ML generated image may be subject to licensing anyways, so avoid it.
		
		> For code:
			> Permissive licenses include MIT, Unlicense, CC0, DWTFYW/WTFPL, and public domain
			> Machine Learning code often needs expansion regardless. ...
				> ... It should be used for boilerplate, not for unique code.  ...
				> ... All ML code needs modification and subsequent expansion.
			> If the tutorial has a repo, ensure a permissive license, or sufficiently generic code.
		
		> For text:
			> Permissive licenses are same as for images. (Why would you copy enough to copyright?)
		
		> For fonts:
			> Permissive licenses include SIL Open Font license
		
		> For sound:
			> Permissive licenses are same as for images.
