Welcome to crude changelog, the log that gets facts wrong about your favorite changes.
I'm jan Wiwijen (jan Opitaman), and today I'll be discussing a pre-alpha version of a Godot project.

Late 2023 - Early 2024


Codename: Project Daybreak
Update: Pre-alpha 5, "The Longest Time"
Namesake: Even if I somehow accidentally finished writing all core code, ...
	... there would still be music left to write.
TL;DR: I found some new tutorials to follow to show I'm an independent thinker.


Noteworthy Additions:
	+ Added, modified, or replaced maps: 
		+ "Home Town Home"
		+ "Home Town Lab"
		* "Route Home to Red"
		* "Port Town Museum"
	+ SceneManager has been tweaked to make use of Godot 4.2's PackedScene preview in editor
		+ Scenes can now be loaded/switched to from a string, a packed scene, or a node treelet
	+ Added Warp Anchors, not to be confused with TrackStar's "waypoints" or lore's "warp slates"
	+ Re-wrote the UMID generation code (older version was in a different repo)
		> needs testing to ensure uniqueness and proper bit manipulation.
	+ Added new Dictionarys to the GlobalDatabase to be used for reading/writing table data.
	+ Added new Movement class to store gamepiece movement instructions
		+ Renamed Move to Technique in an effort to disambiguate.
	+ "Fixed" AnimationTree/Player issues by replacing the state tree with more code
		+ Fixed issue where walking animation wouldn't play
		+ Fixed issue where stopping walking would make the character face the screen
		+ Added crude running animation
	+ Ported over some new code from side-project Daybreak-Director
	+ Added/reimplemented screen transition effect (very sloppy)
	+ Added PushBlock in anticipation for puzzles (pre-Alpha 4)
		+ Fixed PushBlock's movement code in an only slightly hacky way (pre-Alpha 5)
	+ Added ledge, with full functionality except landing_dust_effect + updated sprites
	+ Edited event_interior/exterior system for Gamepieces
		+ Added queue_free / destruction code for Tall Grass
		* Tweaked group assignments
	+ Added code to save all gamepieces to database (proving the new database system kinda works)
		+ Need to update to Godot 4.3 to make it work properly, since I'd rely on global groups
	+ Pressing the 'save' button now saves the player's current location + facing direction
		+ The game is *usually* able to restore the player's last level-map + position
	+ Expanded GlobalDatabase ... 
		+ ... to enable game recovery tests
		+ ... to enable automatic database backups
	+ Added more assets, as always
	
	+ GamepieceWalker (tentative name) for Gamepieces not in current scene but otherwise active
	+ Added more license text


Noteworthy Subtractions:
	- Removed ability for player to clone self by leaving the room they spawned in, then returning.
		* Fixed(?) bug where a map's player's monster had outdated UMID, leading to duplication.
	- Gutted some old GlobalDatabase code to try to save space & increase consistancy
	- Squashed all old warnings, which means some functions were cut or parameters renamed


Noteworthy Changes:
	* Gamepiece cameras should now reset smoothing upon switching maps, improving immersion.
	* Set collision to once again move before the gamepiece graphics
		* If the collision moves first, it looks wrong while debugging.
		* If the collision moves last, it literally is wrong.
	* Yet again changed file structure
	* Changed teleport code to more easily allow for room/map transitions to be treated the same
	* Changed PlayerMenu to no longer rely on _unhandled_input(delta)
	* Changed Tree and House to have the same corner point as Gamepiece; updated maps accordingly


To Do List + Constructive Commentary:
	% Replace the remaining Arkeve tutorial code after prototyping his party screen system
		% Ironically, continue watching and completing more of the tutorials since clearly...
		... independently written code ends up being harder to follow.
		% Revise ALL Arkeve-based code until it both cannot be detected by plagiarism scanners...
		... and is overall more robust. Not either/or, but both of these things.
	% Follow the Chris' Tutorials videos, mix with GDQuest for the battle scene
	% Fix and finish the failsafe map's generation code, otherwise it's not very safe
		% Make the shader actually do something, and put it in a nicer folder
	% Have ledge ensure Gamepieces don't stack on top of eachother by using raycasting.
	% Add/fix texture sheets
		% Split rock and dirt tiles visually
		% Fix the ledge art style
		% Add player hair shapes
			% Add tool to switch texture color palletes
				% Develop code for synthesizing a sprite sheet for the player to use.
		% Add overworld sprites for Mom, Scientist, Starters, and Barney for Alpha demo 01
	% Move the TitleScreen to the ActivityInterface
		% Make the Activity/Overworld switch not shrink the overworld, as this may cause...
		... misalignments if any children are still running.
			% Pausing should switch between process modes INHERIT and DISABLED.
	% Replace the broken traces of D* with a new proposed "TrackStar" algorithm
		% Or... hear me out... delay developing TrackStar and use Godot 4.2's NavMesh baking tool?
			% Still work on TrackStar eventually, but that's very low priority if NavMesh works.
	% Saving and Loading
		% Refactor all save/load code regarding Gamepieces
			% Instead of using signals, have all Gamepieces registered with GlobalGamepieceTransfer
				% When saving, save all members of GlobalGamepieceTransfer
				% Rename GlobalGamepieceTransfer, because of its expanded role (Gametokens too?)
					% Maybe rename to GlobalGamethingTracker? 
			% Gamepiece's data transfer code should be more complete
			% Gamepieces should automatically fix themselves upon being 'placed'
		% Add Gametokens and save code for that
		% Fix database backup system
			% If the databases don't exist, then create them via some template
		% If the game lacks a PATCHDATA database in "user://", then copy the provided one
			% Rely on PATCHDATA for balancing and forwards compatibility but not for assets/code
				% Maybe use PATCHDATA for asset/code pointers/paths? Seems more like a .PCK thing
	% 
	


General Commentary:
	> Code that is reused often, or is otherwise bulky, should be moved to "global" classes.
	> That way, I don't have to worry about if the code is duplicating functions, enums, etc.
	> Only issue then would be too many "global" (autoload) classes.
	
	> Generally, code regarding a thing should be kept within that thing, or its direct controller.
	
	> This whole thing is a redo for multiple reasons including: 
		> Being confused between code and asset licensing in the GitHub repository settings
		> Following tutorials from unknown license repositories
		> Improper credits documentation
		> Outdated version of Godot
		> Setting up is the best part once you know how. Expanding & bugfixing though...?
		
	> No sources should be less permissive than a BSD 3-Clause license. 
	> Everything in here should be both free as in libre, and free as in moneys.
	> All assets not made for this project need proper credit (CC-BY-4.0, SIL), or to be PD/CC0.
		> FilmCow's sound pack license is just past the limit of restrictiveness. Avoid using.
	
	> We're skipping the proper drop of the previous pre-alpha, as a lot of development...
... went into lore, concepts, and other repos. And downloading assets. So much scrolling.
... and also I don't want to.
	
	> It turns out that ALL the work I put into planning a new navigation system...
	> ... the baking, parsing, running, etc...
	> ... it wasn't *useless* per se, but I could just use the navmesh? At least for now?
	> That's right, new to Godot 4.2+, the navmesh easy bake button.
